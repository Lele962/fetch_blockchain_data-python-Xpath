{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 645,
            "contract": "AirsendGifts",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x80",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610579806100536000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b1461005c578063eec6d500146100b3578063f2fde38b146101b4575b600080fd5b34801561006857600080fd5b506100716101f7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100bf57600080fd5b5061019a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061021c565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103f8565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561027957600080fd5b8151835114151561028657fe5b8473ffffffffffffffffffffffffffffffffffffffff1663782ec0238585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561034957808201518184015260208101905061032e565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561038b578082015181840152602081019050610370565b5050505090500195505050505050602060405180830381600087803b1580156103b357600080fd5b505af11580156103c7573d6000803e3d6000fd5b505050506040513d60208110156103dd57600080fd5b81019080805190602001909291905050509050949350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561045357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561048f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a723058206701eac94ddd75a9bf1e177e1fd8ee67b47113db14d96ee0d7d535ea171562c70029",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    },
                    {
                        "address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f",
                        "calldata": "0xeec6d50081010101210103010101010101010181ad010155010101010101a90101572141000000000000000000000000000000000000000000000000000000000000000080",
                        "input": "0xeec6d50081010101210103010101010101010181ad010155010101010101a90101572141000000000000000000000000000000000000000000000000000000000000000080",
                        "name": "multiSend(address,address,address[],uint256[])",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "resolved_input": null,
                        "value": "0x0"
                    }
                ]
            },
            "filename": "output/0x68974bb47457c299b18eeb7093b5a8cb95ee073d.sol",
            "function": "multiSend(address,address,address[],uint256[])",
            "line": 61,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
