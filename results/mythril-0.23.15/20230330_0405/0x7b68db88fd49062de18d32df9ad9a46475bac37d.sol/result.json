{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 285,
            "contract": "ETHDistributor",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061036e8061005e6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063590e1ae3146100595780638da5cb5b1461006e578063a0378730146100c3575b005b341561006457600080fd5b61006c61015d565b005b341561007957600080fd5b610081610232565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100ce57600080fd5b61015b60048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610257565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101b857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561023057600080fd5b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102b457600080fd5b600090505b825181101561033d5782818151811015156102d057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc838381518110151561030157fe5b906020019060200201519081150290604051600060405180830381858888f19350505050151561033057600080fd5b80806001019150506102b9565b5050505600a165627a7a723058201b2ae50d28518cd9005e8860a834c776389b064a96d8d6a04b64b4eb46c3faae0029",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    },
                    {
                        "address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f",
                        "calldata": "0xa037873080000000000000000000000000000000000000000000000000000000000003fcfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc",
                        "input": "0xa037873080000000000000000000000000000000000000000000000000000000000003fcfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc",
                        "name": "addReceivers(address[],uint256[])",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "resolved_input": null,
                        "value": "0x0"
                    }
                ]
            },
            "filename": "output/0x7b68db88fd49062de18d32df9ad9a46475bac37d.sol",
            "function": "addReceivers(address[],uint256[])",
            "line": 11,
            "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101",
            "name": "Integer Arithmetic Bugs (SWC 101)",
            "severity": "High"
        },
        {
            "address": 768,
            "contract": "ETHDistributor",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061036e8061005e6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063590e1ae3146100595780638da5cb5b1461006e578063a0378730146100c3575b005b341561006457600080fd5b61006c61015d565b005b341561007957600080fd5b610081610232565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100ce57600080fd5b61015b60048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610257565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101b857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561023057600080fd5b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102b457600080fd5b600090505b825181101561033d5782818151811015156102d057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc838381518110151561030157fe5b906020019060200201519081150290604051600060405180830381858888f19350505050151561033057600080fd5b80806001019150506102b9565b5050505600a165627a7a723058201b2ae50d28518cd9005e8860a834c776389b064a96d8d6a04b64b4eb46c3faae0029",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    },
                    {
                        "address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f",
                        "calldata": "0xa03787300000000000000000000000000000000000000000000000000000000000000001",
                        "input": "0xa03787300000000000000000000000000000000000000000000000000000000000000001",
                        "name": "addReceivers(address[],uint256[])",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "resolved_input": null,
                        "value": "0x0"
                    }
                ]
            },
            "filename": "output/0x7b68db88fd49062de18d32df9ad9a46475bac37d.sol",
            "function": "addReceivers(address[],uint256[])",
            "line": 13,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        },
        {
            "address": 800,
            "contract": "ETHDistributor",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061036e8061005e6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063590e1ae3146100595780638da5cb5b1461006e578063a0378730146100c3575b005b341561006457600080fd5b61006c61015d565b005b341561007957600080fd5b610081610232565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100ce57600080fd5b61015b60048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610257565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101b857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561023057600080fd5b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102b457600080fd5b600090505b825181101561033d5782818151811015156102d057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc838381518110151561030157fe5b906020019060200201519081150290604051600060405180830381858888f19350505050151561033057600080fd5b80806001019150506102b9565b5050505600a165627a7a723058201b2ae50d28518cd9005e8860a834c776389b064a96d8d6a04b64b4eb46c3faae0029",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    },
                    {
                        "address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f",
                        "calldata": "0xa037873080",
                        "input": "0xa037873080",
                        "name": "addReceivers(address[],uint256[])",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "resolved_input": null,
                        "value": "0x0"
                    }
                ]
            },
            "filename": "output/0x7b68db88fd49062de18d32df9ad9a46475bac37d.sol",
            "function": "addReceivers(address[],uint256[])",
            "line": 14,
            "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113",
            "name": "Multiple Calls in a Single Transaction (SWC 113)",
            "severity": "Low"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
